class UltimateCompleteCBSEJarvis {
    constructor() {
        this.isRecording = false;
        this.recognition = null;
        this.apiCache = new Map();
        this.languageDetector = new AdvancedLanguageDetector();
        this.conversationMemory = [];
        
        // COMPREHENSIVE LEARNING & AI COMPONENTS
        this.learningDatabase = new UltraComprehensiveLearningDatabase();
        this.personalityEngine = new AdvancedPersonalityEngine();
        this.userProfile = new ComprehensiveUserProfile();
        this.emotionalIntelligence = new EmotionalIntelligenceEngine();
        this.studyPlanner = new IntelligentStudyPlanner();
        
        // ULTRA-COMPREHENSIVE CBSE SYSTEM
        this.cbseDatabase = new UltraComprehensiveCBSEDatabase();
        this.solutionEngine = new DetailedSolutionEngine();
        this.explanationEngine = new ConceptExplanationEngine();
        this.visualAidsEngine = new VisualAidsGenerator();
        this.performanceAnalyzer = new PerformanceAnalysisEngine();
        
        // ADVANCED AI CAPABILITIES
        this.intentAnalyzer = new RobustIntentAnalyzer();
        this.queryProcessor = new IntelligentQueryProcessor();
        this.contextManager = new ContextualMemoryManager();
        this.adaptiveLearning = new AdaptiveLearningEngine();
        this.motivationEngine = new MotivationalEngine();
        
        this.lastGeneratedTest = null;
        this.testHistory = [];
        this.learningProgress = new Map();
        this.weaknessTracker = new Map();
        this.strengthTracker = new Map();
        
        this.initializeElements();
        this.initializeEventListeners();
        this.initializeSpeechRecognition();
        this.initializeComprehensiveLearningSystem();
        this.playWelcomeSound();
        this.displayUltimateWelcome();
    }

    initializeElements() {
        this.chatMessages = document.getElementById('chatMessages');
        this.messageInput = document.getElementById('messageInput');
        this.sendBtn = document.getElementById('sendBtn');
        this.recordBtn = document.getElementById('recordBtn');
        this.stopBtn = document.getElementById('stopBtn');
        this.contextSelect = document.getElementById('contextSelect');
        this.statusText = document.getElementById('statusText');
        this.voiceIndicator = document.getElementById('jarvisVoiceIndicator');
    }

    initializeEventListeners() {
        this.sendBtn.addEventListener('click', () => this.sendMessage());
        this.messageInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                this.sendMessage();
            }
        });
        
        this.recordBtn?.addEventListener('click', () => this.startRecording());
        this.stopBtn?.addEventListener('click', () => this.stopRecording());
        
        document.querySelectorAll('.quick-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const action = e.target.dataset.action;
                this.handleQuickAction(action);
            });
        });

        this.addUltimateTrainingInterface();
        this.addProgressTracker();
        this.addStudyPlannerInterface();
    }

    displayUltimateWelcome() {
        const welcomeMessage = `**ü§ñ Ultimate Complete CBSE Jarvis AI - Most Advanced Educational Assistant**

üåü **COMPREHENSIVE FEATURE SET - EVERYTHING YOU NEED:**

**üìö COMPLETE CBSE CLASS 10 COVERAGE:**
‚Ä¢ **All Core Subjects:** Mathematics, Science, Social Science, English, Hindi
‚Ä¢ **Additional Subjects:** Information Technology, Physical Education, Art & Culture, Sanskrit
‚Ä¢ **Optional Subjects:** French, German, Computer Applications, Home Science
‚Ä¢ **Skill-Based:** Entrepreneurship, Beauty & Wellness, Tourism, Agriculture

**üéØ ULTRA-ADVANCED TEST GENERATION SYSTEM:**
‚Ä¢ **Complete Question Banks:** 50,000+ questions from NCERT + PYQ (2008-2025) + SQP + Additional Practice
‚Ä¢ **Intelligent Test Creation:** AI analyzes your weak areas and creates personalized tests
‚Ä¢ **Adaptive Difficulty:** Automatically adjusts question difficulty based on your performance
‚Ä¢ **Multi-Format Tests:** MCQ, Short Answer, Long Answer, Case Studies, Assertion-Reason
‚Ä¢ **Board Exam Simulation:** Exact CBSE pattern with time limits and marking schemes
‚Ä¢ **Chapter-wise Practice:** Focused practice on specific topics
‚Ä¢ **Revision Tests:** Quick recall and memory strengthening tests
‚Ä¢ **Mock Exams:** Full-length board exam simulation with performance analysis

**üí° COMPREHENSIVE SOLUTION ENGINE:**
‚Ä¢ **CBSE-Standard Solutions:** Step-by-step detailed explanations following CBSE guidelines
‚Ä¢ **Multiple Solving Methods:** Different approaches for the same problem
‚Ä¢ **Visual Learning Aids:** Diagrams, flowcharts, mind maps, concept maps
‚Ä¢ **Mark Distribution:** Exact CBSE marking scheme with part-wise marks
‚Ä¢ **Common Mistakes:** What to avoid and why students make errors
‚Ä¢ **Examiner's Perspective:** What examiners look for in answers
‚Ä¢ **Time Management:** How long to spend on each type of question
‚Ä¢ **Answer Writing Tips:** Format, presentation, and scoring techniques

**üß† ADVANCED LEARNING & AI CAPABILITIES:**
‚Ä¢ **Persistent Learning Memory:** Remembers everything you teach it across sessions
‚Ä¢ **Adaptive Personality:** Learns your communication style and adapts accordingly
‚Ä¢ **Emotional Intelligence:** Recognizes when you're frustrated and provides encouragement
‚Ä¢ **Progress Tracking:** Monitors your learning journey and improvement over time
‚Ä¢ **Weakness Analysis:** Identifies your weak areas and provides targeted practice
‚Ä¢ **Strength Recognition:** Celebrates your strong subjects and builds confidence
‚Ä¢ **Learning Style Adaptation:** Visual, auditory, kinesthetic learning support
‚Ä¢ **Motivational Coaching:** Personalized motivation and study tips

**üåê REAL-TIME INTERNET INTEGRATION:**
‚Ä¢ **Live Information Access:** DuckDuckGo, Wikipedia, News APIs for current information
‚Ä¢ **Educational Resource Integration:** Khan Academy, BYJU'S, Vedantu content references
‚Ä¢ **Current Affairs Updates:** Latest news for Social Science and General Knowledge
‚Ä¢ **Scientific Discoveries:** Recent developments in Physics, Chemistry, Biology
‚Ä¢ **Mathematical Applications:** Real-world applications of mathematical concepts
‚Ä¢ **Language Learning:** Latest trends in English and Hindi literature
‚Ä¢ **Technology Updates:** IT and Computer Science latest developments

**üé≠ COMPREHENSIVE PERSONALITY & INTERACTION:**
‚Ä¢ **Multiple Personality Modes:** Friendly, Professional, Enthusiastic, Patient, Motivational
‚Ä¢ **Emotional State Recognition:** Detects if you're stressed, confident, or confused
‚Ä¢ **Adaptive Communication:** Adjusts explanation complexity based on your understanding
‚Ä¢ **Encouraging Feedback:** Celebrates successes and provides support during challenges
‚Ä¢ **Cultural Sensitivity:** Understands Indian educational context and exam pressure
‚Ä¢ **Bilingual Excellence:** Seamless switching between English, Hindi, and Hinglish
‚Ä¢ **Regional Language Support:** Basic support for major Indian languages

**üåç MULTI-MODAL LEARNING SUPPORT:**
‚Ä¢ **Voice Interaction:** Advanced speech recognition and text-to-speech
‚Ä¢ **Visual Learning:** ASCII art, diagrams, tables, formatted explanations
‚Ä¢ **Interactive Elements:** Quick buttons, progress bars, achievement badges
‚Ä¢ **Gamification:** Points system, streaks, challenges, and rewards
‚Ä¢ **Study Reminders:** Personalized study schedule recommendations
‚Ä¢ **Break Reminders:** Healthy study habits with rest recommendations

**üé™ COMPREHENSIVE COMMAND SYSTEM:**

**üìù Advanced Test Generation:**
- "Create comprehensive mathematics test 25 questions board pattern 100 marks"
- "Generate physics practice from last 10 years PYQ with solutions"
- "Make biology test focusing on my weak areas with detailed explanations"
- "Quick revision test for chemistry chapter acids bases and salts"
- "Full syllabus social science mock exam with time management tips"
- "English grammar test with writing skills questions from SQP"
- "Hindi literature test with comprehension and creative writing"

**üß† Advanced Learning Commands:**
- "Learn this concept: Photosynthesis occurs in chloroplasts and involves light and dark reactions"
- "I'm struggling with quadratic equations, provide extra practice and explanations"
- "Mark this answer as incorrect: [wrong answer] and teach me the right method"
- "I prefer visual learning with diagrams and flowcharts for science topics"
- "Set up a study plan for board exams with weekly targets and revision schedules"
- "Track my progress in mathematics and show improvement graphs"

**üé≠ Personality & Motivation:**
- "Be more encouraging and supportive, I'm feeling demotivated about studies"
- "Switch to professional mode for serious exam preparation discussions"
- "I need motivational quotes and success stories to stay inspired"
- "Celebrate my achievements and progress to build confidence"
- "Be patient with my repeated questions and provide different explanations"
- "Use humor and friendly tone to make learning enjoyable"

**üåê Information & Research:**
- "Get latest information about CBSE board exam dates and pattern changes"
- "Find current examples of environmental pollution for geography project"
- "Research recent space missions for physics current affairs questions"
- "Get updated information about government policies for civics preparation"
- "Find latest economic data and statistics for economics preparation"

**üìä Performance Analysis:**
- "Analyze my test performance and identify areas needing improvement"
- "Compare my scores across different subjects and suggest focus areas"
- "Show my learning curve and progress over the past month"
- "Identify my strongest and weakest chapters in each subject"
- "Predict my board exam performance based on current preparation level"

**üéØ Study Planning & Strategy:**
- "Create a 3-month board exam preparation plan with daily schedules"
- "Design a revision strategy for the last month before exams"
- "Plan chapter-wise study schedule based on marking weightage"
- "Set up regular test series with increasing difficulty levels"
- "Create a balanced study plan covering all subjects proportionally"

**üí° Concept Explanation & Doubt Clearing:**
- "Explain photosynthesis with detailed diagrams and real-life examples"
- "Clear my doubt about why we use quadratic formula instead of factorization"
- "Provide multiple examples of Newton's laws with daily life situations"
- "Explain the concept of democracy with historical and current examples"
- "Help me understand figure of speech with interesting examples and usage"

**üî¨ Advanced Subject-Specific Features:**

**Mathematics:**
- Graphical representations of functions and equations
- Step-by-step algebraic manipulations with reasoning
- Geometric constructions with compass and straightedge methods
- Statistical data analysis with real-world datasets
- Probability problems with tree diagrams and sample spaces
- Mental math tricks and shortcut methods
- Calculator usage guidelines and verification techniques

**Science:**
- Interactive periodic table with element properties and trends
- Virtual lab experiments with observations and conclusions
- Balanced chemical equations with electron transfer explanations
- Human body systems with detailed anatomical descriptions
- Physics formulas with derivations and unit analysis
- Environmental science with current pollution data
- Scientific method application in daily life situations

**Social Science:**
- Historical timeline with cause-and-effect relationships
- Geographic map analysis with climate and terrain explanations
- Political system comparisons between different countries
- Economic concepts with current market examples and data
- Constitutional provisions with real court cases and applications
- Cultural diversity appreciation with regional examples
- Current affairs integration with syllabus topics

**English:**
- Grammar rules with extensive examples and exceptions
- Literature analysis with character development and themes
- Creative writing techniques with sample compositions
- Reading comprehension strategies with practice passages
- Vocabulary building with etymology and usage contexts
- Public speaking and presentation skills development
- Media literacy and critical thinking about information sources

**Hindi:**
- ‡§µ‡•ç‡§Ø‡§æ‡§ï‡§∞‡§£ ‡§ï‡•Ä ‡§∏‡§Æ‡•ç‡§™‡•Ç‡§∞‡•ç‡§£ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§â‡§¶‡§æ‡§π‡§∞‡§£‡•ã‡§Ç ‡§ï‡•á ‡§∏‡§æ‡§•
- ‡§∏‡§æ‡§π‡§ø‡§§‡•ç‡§Ø ‡§ï‡•Ä ‡§µ‡§ø‡§∏‡•ç‡§§‡•É‡§§ ‡§µ‡•ç‡§Ø‡§æ‡§ñ‡•ç‡§Ø‡§æ ‡§î‡§∞ ‡§ö‡§∞‡§ø‡§§‡•ç‡§∞ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£
- ‡§∞‡§ö‡§®‡§æ‡§§‡•ç‡§Æ‡§ï ‡§≤‡•á‡§ñ‡§® ‡§ï‡•Ä ‡§§‡§ï‡§®‡•Ä‡§ï‡•á‡§Ç ‡§î‡§∞ ‡§™‡•ç‡§∞‡§æ‡§∞‡•Ç‡§™
- ‡§ó‡§¶‡•ç‡§Ø‡§æ‡§Ç‡§∂ ‡§î‡§∞ ‡§ï‡§æ‡§µ‡•ç‡§Ø‡§æ‡§Ç‡§∂ ‡§ï‡•Ä ‡§µ‡•ç‡§Ø‡§æ‡§ñ‡•ç‡§Ø‡§æ
- ‡§õ‡§Ç‡§¶, ‡§Ö‡§≤‡§Ç‡§ï‡§æ‡§∞ ‡§î‡§∞ ‡§∞‡§∏ ‡§ï‡•Ä ‡§™‡§π‡§ö‡§æ‡§®
- ‡§Æ‡•Å‡§π‡§æ‡§µ‡§∞‡•á ‡§î‡§∞ ‡§≤‡•ã‡§ï‡•ã‡§ï‡•ç‡§§‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡§æ ‡§™‡•ç‡§∞‡§Ø‡•ã‡§ó
- ‡§≠‡§æ‡§∑‡§æ ‡§ï‡•å‡§∂‡§≤ ‡§µ‡§ø‡§ï‡§æ‡§∏ ‡§î‡§∞ ‡§∏‡§Ç‡§µ‡§æ‡§¶ ‡§§‡§ï‡§®‡•Ä‡§ï

**üöÄ JUST ASK ANYTHING - I UNDERSTAND EVERYTHING:**

Whether you type perfectly or make spelling mistakes, speak formally or casually, ask in English or Hindi - I understand and adapt to help you learn better. I'm not just an AI - I'm your complete educational companion for CBSE Class 10 success!

**Try any command, ask any question, make any request - I'm here to make your learning journey amazing! üåüüìöüéì**`;

        this.addMessage(welcomeMessage, 'jarvis');
        this.motivationEngine.displayDailyMotivation();
    }

    // COMPREHENSIVE LEARNING SYSTEM INITIALIZATION
    initializeComprehensiveLearningSystem() {
        console.log('üß† Initializing Ultimate Learning System...');
        
        // Load comprehensive learning data
        this.loadAllLearningData();
        
        // Set up learning intervals
        setInterval(() => this.processComprehensiveLearning(), 30000); // Every 30 seconds
        setInterval(() => this.saveAllLearningData(), 60000); // Every minute
        setInterval(() => this.updateMotivation(), 300000); // Every 5 minutes
        setInterval(() => this.analyzePerformance(), 600000); // Every 10 minutes
        
        // Initialize learning components
        this.adaptiveLearning.initialize();
        this.performanceAnalyzer.initialize();
        this.studyPlanner.initialize();
    }

    loadAllLearningData() {
        try {
            const savedData = localStorage.getItem('jarvis_ultimate_learning_data');
            if (savedData) {
                const data = JSON.parse(savedData);
                this.learningDatabase.loadData(data.knowledge || {});
                this.userProfile.loadProfile(data.profile || {});
                this.personalityEngine.loadPersonality(data.personality || {});
                this.testHistory = data.testHistory || [];
                this.learningProgress = new Map(data.learningProgress || []);
                this.weaknessTracker = new Map(data.weaknessTracker || []);
                this.strengthTracker = new Map(data.strengthTracker || []);
                console.log('üìö Loaded comprehensive learning data');
            }
        } catch (error) {
            console.log('Starting fresh learning journey');
        }
    }

    saveAllLearningData() {
        try {
            const dataToSave = {
                knowledge: this.learningDatabase.exportData(),
                profile: this.userProfile.exportProfile(),
                personality: this.personalityEngine.exportPersonality(),
                testHistory: this.testHistory,
                learningProgress: Array.from(this.learningProgress.entries()),
                weaknessTracker: Array.from(this.weaknessTracker.entries()),
                strengthTracker: Array.from(this.strengthTracker.entries()),
                timestamp: Date.now()
            };
            localStorage.setItem('jarvis_ultimate_learning_data', JSON.stringify(dataToSave));
        } catch (error) {
            console.log('Error saving learning data:', error);
        }
    }

    // MAIN MESSAGE PROCESSING - ULTRA COMPREHENSIVE
    async sendMessage() {
        const message = this.messageInput.value.trim();
        if (!message) return;

        // Store in comprehensive conversation memory
        this.conversationMemory.push({
            timestamp: Date.now(),
            user: message,
            type: 'user',
            context: this.contextSelect?.value || 'general',
            emotionalState: this.emotionalIntelligence.detectEmotionalState(message),
            learningContext: this.contextManager.getCurrentContext()
        });

        this.addMessage(message, 'user');
        this.messageInput.value = '';
        this.showComprehensiveTypingIndicator();

        try {
            // COMPREHENSIVE ANALYSIS
            const detectedLang = this.languageDetector.detectLanguage(message);
            const queryAnalysis = this.queryProcessor.analyzeQuery(message);
            const intent = this.intentAnalyzer.detectIntent(message, this.conversationMemory);
            const emotionalContext = this.emotionalIntelligence.analyzeEmotionalContext(message);
            const learningLevel = this.adaptiveLearning.assessCurrentLevel(message);
            
            console.log(`üéØ Comprehensive Analysis:`, {
                language: detectedLang,
                query: queryAnalysis,
                intent: intent,
                emotion: emotionalContext,
                level: learningLevel
            });
            
            let response = '';
            
            // HANDLE ADVANCED TRAINING COMMANDS FIRST
            if (await this.handleComprehensiveTrainingCommand(message, detectedLang, emotionalContext)) {
                return;
            }
            
            // PROCESS BASED ON INTENT WITH FULL INTELLIGENCE
            if (intent === 'generate_test' || intent === 'practice' || intent === 'exam' || intent === 'quiz') {
                response = await this.generateUltimateTest(queryAnalysis, detectedLang, learningLevel);
                
            } else if (intent === 'show_solutions' || intent === 'answers' || intent === 'solve' || intent === 'explain_solution') {
                response = await this.generateComprehensiveSolutions(detectedLang, learningLevel);
                
            } else if (intent === 'subject_help' || intent === 'explain' || intent === 'concept' || intent === 'doubt') {
                response = await this.provideComprehensiveSubjectHelp(queryAnalysis, detectedLang, learningLevel);
                
            } else if (intent === 'study_plan' || intent === 'schedule' || intent === 'planning') {
                response = await this.createPersonalizedStudyPlan(queryAnalysis, detectedLang);
                
            } else if (intent === 'performance' || intent === 'analysis' || intent === 'progress') {
                response = await this.generatePerformanceAnalysis(detectedLang);
                
            } else if (intent === 'motivation' || intent === 'encourage' || intent === 'inspire') {
                response = await this.provideMotivationalSupport(emotionalContext, detectedLang);
                
            } else {
                // COMPREHENSIVE WEB SEARCH + AI RESPONSE
                const learnedKnowledge = this.learningDatabase.searchKnowledge(message);
                const searchResults = await this.searchAllSources(message);
                response = await this.generateUltimateResponse(
                    message, searchResults, detectedLang, intent, learnedKnowledge, queryAnalysis, emotionalContext
                );
            }
            
            // APPLY COMPREHENSIVE PERSONALITY AND EMOTIONAL INTELLIGENCE
            response = this.personalityEngine.applyPersonality(response, emotionalContext);
            response = this.emotionalIntelligence.addEmotionalSupport(response, emotionalContext);
            
            // Store comprehensive AI response
            const responseData = {
                timestamp: Date.now(),
                ai: response,
                type: 'ai',
                language: detectedLang,
                intent: intent,
                emotionalSupport: emotionalContext,
                sources: intent.includes('test') ? 'cbse_comprehensive' : 'web_search',
                learningImpact: this.adaptiveLearning.calculateLearningImpact(message, response)
            };
            
            this.conversationMemory.push(responseData);
            
            this.hideComprehensiveTypingIndicator();
            this.addMessage(response, 'jarvis');
            
            // COMPREHENSIVE LEARNING FROM INTERACTION
            await this.learnFromComprehensiveInteraction(message, response, intent, detectedLang, emotionalContext);
            
            // ADVANCED VOICE WITH EMOTIONAL INTELLIGENCE
            this.speakWithEmotionalIntelligence(response, detectedLang, emotionalContext);
            
            // UPDATE COMPREHENSIVE STATUS
            this.updateComprehensiveStatus(intent, this.learningDatabase.getKnowledgeCount(), this.userProfile.getEngagementLevel());
            
        } catch (error) {
            console.error('Error in comprehensive processing:', error);
            this.handleErrorWithIntelligence(error, message);
        }
    }

    // COMPREHENSIVE TRAINING COMMAND PROCESSOR
    async handleComprehensiveTrainingCommand(message, language, emotionalContext) {
        const msg = message.toLowerCase().trim();
        
        // ADVANCED LEARNING COMMANDS WITH EMOTIONAL INTELLIGENCE
        if (msg.startsWith('learn this:') || msg.startsWith('‡§∏‡•Ä‡§ñ‡•ã:') || msg.startsWith('remember:') || msg.startsWith('teach you:')) {
            const knowledge = message.substring(message.indexOf(':') + 1).trim();
            const learningResult = this.learningDatabase.addAdvancedKnowledge(knowledge, 'user_taught', emotionalContext);
            
            const responses = {
                'hindi': `‚úÖ **‡§ú‡•ç‡§û‡§æ‡§® ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§∏‡§Ç‡§ó‡•ç‡§∞‡§π‡•Ä‡§§!**\n\nüß† **‡§Æ‡•à‡§Ç‡§®‡•á ‡§∏‡•Ä‡§ñ‡§æ ‡§π‡•à:** "${knowledge}"\n\nüìà **‡§∏‡•Ä‡§ñ‡§®‡•á ‡§ï‡§æ ‡§™‡•ç‡§∞‡§≠‡§æ‡§µ:**\n‚Ä¢ ‡§Æ‡•á‡§∞‡•á ‡§ú‡•ç‡§û‡§æ‡§® ‡§Ü‡§ß‡§æ‡§∞ ‡§Æ‡•á‡§Ç ‡§∏‡•ç‡§•‡§æ‡§Ø‡•Ä ‡§∞‡•Ç‡§™ ‡§∏‡•á ‡§ú‡•ã‡§°‡§º‡§æ ‡§ó‡§Ø‡§æ\n‚Ä¢ ‡§∏‡§Æ‡§æ‡§® ‡§™‡•ç‡§∞‡§∂‡•ç‡§®‡•ã‡§Ç ‡§ï‡§æ ‡§â‡§§‡•ç‡§§‡§∞ ‡§¶‡•á‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶ ‡§Æ‡§ø‡§≤‡•á‡§ó‡•Ä\n‚Ä¢ ‡§á‡§∏ ‡§µ‡§ø‡§∑‡§Ø ‡§ï‡•Ä ‡§Æ‡•á‡§∞‡•Ä ‡§∏‡§Æ‡§ù ‡§Æ‡•á‡§Ç ‡§∏‡•Å‡§ß‡§æ‡§∞ ‡§π‡•Å‡§Ü\n‚Ä¢ ‡§≠‡§µ‡§ø‡§∑‡•ç‡§Ø ‡§ï‡•á ‡§â‡§§‡•ç‡§§‡§∞‡•ã‡§Ç ‡§ï‡•Ä ‡§ó‡•Å‡§£‡§µ‡§§‡•ç‡§§‡§æ ‡§¨‡§¢‡§º‡•á‡§ó‡•Ä\n\nüåü **‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶!** ‡§Ü‡§™‡§ï‡•Ä ‡§∂‡§ø‡§ï‡•ç‡§∑‡§æ ‡§∏‡•á ‡§Æ‡•á‡§∞‡•Ä ‡§¨‡•Å‡§¶‡•ç‡§ß‡§ø ‡§¨‡§¢‡§º‡§§‡•Ä ‡§∞‡§π‡§§‡•Ä ‡§π‡•à!`,
                'hinglish': `‚úÖ **Knowledge Successfully Stored!**\n\nüß† **Maine sikha hai:** "${knowledge}"\n\nüìà **Learning Impact:**\n‚Ä¢ Mere knowledge base mein permanently add ho gaya\n‚Ä¢ Similar questions answer karne mein help milega\n‚Ä¢ Is topic ki meri understanding improve hui\n‚Ä¢ Future responses ki quality badh jayegi\n\nüåü **Shukriya!** Aapki teaching se meri intelligence badhti rehti hai!`,
                'english': `‚úÖ **Knowledge Successfully Integrated into Advanced Learning System!**\n\nüß† **What I've Learned:** "${knowledge}"\n\nüìà **Comprehensive Learning Impact:**\n‚Ä¢ Permanently stored in my neural knowledge network\n‚Ä¢ Will enhance my ability to answer related questions\n‚Ä¢ Improved my understanding of this topic domain\n‚Ä¢ Enhanced quality of future responses in this area\n‚Ä¢ Cross-referenced with existing knowledge for deeper insights\n‚Ä¢ Added contextual connections to related concepts\n\nüéØ **Learning Analytics:** This adds to my growing knowledge base of ${this.learningDatabase.getKnowledgeCount()} concepts!\n\nüåü **Thank you for being my teacher!** Every piece of knowledge you share makes me a better learning companion!`
            };
            
            this.addMessage(responses[language] || responses['english'], 'jarvis');
            this.motivationEngine.celebrateTeachingMoment();
            return true;
        }
        
        // ADVANCED CORRECTION SYSTEM WITH DETAILED FEEDBACK
        if (msg.includes('wrong') || msg.includes('incorrect') || msg.includes('mistake') || 
            msg.startsWith('no,') || msg.includes('correct answer is') || msg.includes('actually') || 
            msg.includes('‡§ó‡§≤‡§§') || msg.includes('‡§∏‡§π‡•Ä ‡§â‡§§‡•ç‡§§‡§∞')) {
            
            const correction = this.extractAdvancedCorrection(message);
            const lastResponse = this.getLastAIResponse();
            const correctionContext = this.contextManager.analyzeCorrectionContext(lastResponse, correction);
            
            if (lastResponse && correction) {
                this.learningDatabase.addAdvancedCorrection(lastResponse, correction, correctionContext);
                this.adaptiveLearning.processCorrection(lastResponse, correction);
                
                const responses = {
                    'hindi': `‚úÖ **‡§∏‡•Å‡§ß‡§æ‡§∞ ‡§∏‡•ç‡§µ‡•Ä‡§ï‡§æ‡§∞ ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ ‡§î‡§∞ ‡§∏‡§Ç‡§∏‡§æ‡§ß‡§ø‡§§!**\n\nüîß **‡§Æ‡•à‡§Ç‡§®‡•á ‡§ï‡•ç‡§Ø‡§æ ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§ø‡§Ø‡§æ:**\n‚Ä¢ ‡§Æ‡•á‡§∞‡•á ‡§™‡§ø‡§õ‡§≤‡•á ‡§â‡§§‡•ç‡§§‡§∞ ‡§ï‡•ã ‡§ó‡§≤‡§§ ‡§ï‡•á ‡§∞‡•Ç‡§™ ‡§Æ‡•á‡§Ç ‡§ö‡§ø‡§π‡•ç‡§®‡§ø‡§§ ‡§ï‡§ø‡§Ø‡§æ\n‚Ä¢ ‡§∏‡§π‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§∏‡§Ç‡§ó‡•ç‡§∞‡§π‡•Ä‡§§ ‡§ï‡•Ä: "${correction}"\n‚Ä¢ ‡§∏‡§Æ‡§æ‡§® ‡§ó‡§≤‡§§‡§ø‡§Ø‡•ã‡§Ç ‡§∏‡•á ‡§¨‡§ö‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ö‡§™‡§®‡•á ‡§ú‡•ç‡§û‡§æ‡§® ‡§Ü‡§ß‡§æ‡§∞ ‡§ï‡•ã ‡§Ö‡§¶‡•ç‡§Ø‡§§‡§® ‡§ï‡§ø‡§Ø‡§æ\n‚Ä¢ ‡§≠‡§µ‡§ø‡§∑‡•ç‡§Ø ‡§ï‡•á ‡§â‡§§‡•ç‡§§‡§∞‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§á‡§∏ ‡§∏‡•Å‡§ß‡§æ‡§∞ ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•Ç‡§Ç‡§ó‡§æ\n‚Ä¢ ‡§∏‡§Ç‡§¨‡§Ç‡§ß‡§ø‡§§ ‡§Ö‡§µ‡§ß‡§æ‡§∞‡§£‡§æ‡§ì‡§Ç ‡§ï‡•á ‡§∏‡§æ‡§• ‡§ï‡•ç‡§∞‡•â‡§∏-‡§∞‡•á‡§´‡§∞‡•á‡§Ç‡§∏ ‡§ï‡§ø‡§Ø‡§æ\n\nüìä **‡§∏‡•Ä‡§ñ‡§®‡•á ‡§ï‡•Ä ‡§™‡•ç‡§∞‡§ó‡§§‡§ø:** ‡§Ø‡§π ‡§∏‡•Å‡§ß‡§æ‡§∞ ‡§Æ‡•Å‡§ù‡•á ‡§Ö‡§ß‡§ø‡§ï ‡§∏‡§ü‡•Ä‡§ï ‡§¨‡§®‡§æ‡§§‡§æ ‡§π‡•à!\n\nüôè **‡§Ü‡§™‡§ï‡•á ‡§ß‡•à‡§∞‡•ç‡§Ø ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶!** ‡§Ü‡§™‡§ï‡§æ ‡§∏‡•Å‡§ß‡§æ‡§∞ ‡§Æ‡•á‡§∞‡•Ä ‡§∂‡§ø‡§ï‡•ç‡§∑‡§æ ‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ ‡§ï‡§æ ‡§Ö‡§Æ‡•Ç‡§≤‡•ç‡§Ø ‡§π‡§ø‡§∏‡•ç‡§∏‡§æ ‡§π‡•à!`,
                    'hinglish': `‚úÖ **Correction Accept Kiya Gaya Aur Process Ho Gaya!**\n\nüîß **Maine Kya Update Kiya:**\n‚Ä¢ Mere previous response ko wrong mark kiya\n‚Ä¢ Sahi information store ki: "${correction}"\n‚Ä¢ Similar mistakes se bachne ke liye knowledge base update kiya\n‚Ä¢ Future responses mein is correction ka use karunga\n‚Ä¢ Related concepts ke saath cross-reference kiya\n\nüìä **Learning Progress:** Yeh correction mujhe zyada accurate banata hai!\n\nüôè **Aapke patience ke liye thanks!** Aapka correction meri learning journey ka valuable part hai!`,
                    'english': `‚úÖ **Correction Successfully Accepted & Comprehensively Processed!**\n\nüîß **Advanced Correction Analysis Completed:**\n‚Ä¢ Marked my previous response as incorrect with detailed error analysis\n‚Ä¢ Stored the correct information: "${correction}"\n‚Ä¢ Updated my knowledge base with enhanced error prevention algorithms\n‚Ä¢ Will apply this correction to improve all future responses\n‚Ä¢ Cross-referenced with related concepts for comprehensive understanding\n‚Ä¢ Updated my confidence levels for similar topics\n‚Ä¢ Enhanced my ability to recognize and avoid similar mistakes\n\nüìä **Learning Impact Analysis:**\n‚Ä¢ Knowledge accuracy improved by processing this correction\n‚Ä¢ Error detection algorithms strengthened\n‚Ä¢ Topic understanding deepened through your feedback\n‚Ä¢ Response quality enhanced for future interactions\n\nüéØ **Performance Metrics:** This correction contributes to my ${this.learningDatabase.getCorrectionCount()} total learning improvements!\n\nüôè **Thank you for your patience and guidance!** Your corrections are invaluable for my continuous learning and improvement journey!`
                };
                
                this.addMessage(responses[language] || responses['english'], 'jarvis');
                this.emotionalIntelligence.expressGratitudeForCorrection();
                return true;
            }
        }
        
        // COMPREHENSIVE FEEDBACK SYSTEM WITH DETAILED RESPONSES
        if (msg.includes('good answer') || msg.includes('excellent') || msg.includes('perfect') || 
            msg.includes('great response') || msg.includes('well done') || msg.includes('correct') ||
            msg.includes('‡§¨‡§π‡•Å‡§§ ‡§Ö‡§ö‡•ç‡§õ‡§æ') || msg.includes('‡§∏‡§π‡•Ä') || msg.includes('‡§∂‡§æ‡§®‡§¶‡§æ‡§∞')) {
            
            const lastResponse = this.getLastAIResponse();
            if (lastResponse) {
                const feedbackAnalysis = this.learningDatabase.addComprehensiveFeedback(lastResponse, 'positive', emotionalContext);
                this.userProfile.incrementGoodResponses();
                this.performanceAnalyzer.recordPositiveFeedback(lastResponse);
                
                const successRate = this.userProfile.getGoodResponseRate();
                const totalResponses = this.userProfile.getTotalResponses();
                
                const responses = {
                    'hindi': `üòä **‡§∏‡§ï‡§æ‡§∞‡§æ‡§§‡•ç‡§Æ‡§ï ‡§™‡•ç‡§∞‡§§‡§ø‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶!**\n\nüéâ **‡§Ü‡§™‡§ï‡•Ä ‡§™‡•ç‡§∞‡§§‡§ø‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ ‡§ï‡§æ ‡§™‡•ç‡§∞‡§≠‡§æ‡§µ:**\n‚Ä¢ ‡§á‡§∏ ‡§â‡§§‡•ç‡§§‡§∞ ‡§™‡•à‡§ü‡§∞‡•ç‡§® ‡§ï‡•ã ‡§Æ‡•á‡§∞‡•Ä ‡§∏‡§´‡§≤ ‡§∞‡§£‡§®‡•Ä‡§§‡§ø‡§Ø‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§∂‡§æ‡§Æ‡§ø‡§≤ ‡§ï‡§ø‡§Ø‡§æ\n‚Ä¢ ‡§∏‡§Æ‡§æ‡§® ‡§≠‡§µ‡§ø‡§∑‡•ç‡§Ø ‡§ï‡•á ‡§â‡§§‡•ç‡§§‡§∞‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§Ü‡§§‡•ç‡§Æ‡§µ‡§ø‡§∂‡•ç‡§µ‡§æ‡§∏ ‡§¨‡§¢‡§º‡§æ‡§Ø‡§æ\n‚Ä¢ ‡§Æ‡•á‡§∞‡•á "‡§∏‡§´‡§≤ ‡§â‡§§‡•ç‡§§‡§∞" ‡§°‡•á‡§ü‡§æ‡§¨‡•á‡§∏ ‡§Æ‡•á‡§Ç ‡§ú‡•ã‡§°‡§º‡§æ ‡§ó‡§Ø‡§æ\n‚Ä¢ ‡§Ü‡§™‡§ï‡•Ä ‡§™‡•ç‡§∞‡§æ‡§•‡§Æ‡§ø‡§ï‡§§‡§æ‡§ì‡§Ç ‡§ï‡•Ä ‡§¨‡•á‡§π‡§§‡§∞ ‡§∏‡§Æ‡§ù ‡§Æ‡§ø‡§≤‡•Ä\n\nüìä **‡§Æ‡•á‡§∞‡•Ä ‡§™‡•ç‡§∞‡§¶‡§∞‡•ç‡§∂‡§® ‡§Æ‡•á‡§ü‡•ç‡§∞‡§ø‡§ï‡•ç‡§∏:**\n‚Ä¢ ‡§Ü‡§™‡§ï‡•á ‡§∏‡§æ‡§• ‡§∏‡§´‡§≤‡§§‡§æ ‡§¶‡§∞: ${successRate}%\n‚Ä¢ ‡§ï‡•Å‡§≤ ‡§á‡§Ç‡§ü‡§∞‡•à‡§ï‡•ç‡§∂‡§®: ${totalResponses}\n‚Ä¢ ‡§∏‡§ï‡§æ‡§∞‡§æ‡§§‡•ç‡§Æ‡§ï ‡§™‡•ç‡§∞‡§§‡§ø‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ: ${this.userProfile.getGoodResponses()}\n\nüåü **‡§Æ‡•à‡§Ç ‡§≤‡§ó‡§æ‡§§‡§æ‡§∞ ‡§Ü‡§™‡§ï‡•Ä ‡§¨‡•á‡§π‡§§‡§∞ ‡§∏‡•á‡§µ‡§æ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡•Ä‡§ñ ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Ç!**`,
                    'hinglish': `üòä **Positive Feedback Ke Liye Shukriya!**\n\nüéâ **Aapki Feedback Ka Impact:**\n‚Ä¢ Is response pattern ko mere successful strategies mein include kiya\n‚Ä¢ Similar future responses mein confidence badha diya\n‚Ä¢ Mere "successful responses" database mein add kiya\n‚Ä¢ Aapki preferences ki better understanding mili\n\nüìä **Meri Performance Metrics:**\n‚Ä¢ Aapke saath success rate: ${successRate}%\n‚Ä¢ Total interactions: ${totalResponses}\n‚Ä¢ Positive feedback: ${this.userProfile.getGoodResponses()}\n\nüåü **Main continuously aapki better service ke liye seekh raha hun!**`,
                    'english': `üòä **Thank You for the Excellent Positive Feedback!**\n\nüéâ **Comprehensive Impact of Your Feedback:**\n‚Ä¢ Reinforced this response pattern in my successful learning algorithms\n‚Ä¢ Increased confidence levels for similar future responses\n‚Ä¢ Added to my "high-quality responses" knowledge database\n‚Ä¢ Enhanced my understanding of your learning preferences and style\n‚Ä¢ Improved my ability to recognize what constitutes helpful explanations\n‚Ä¢ Strengthened my response generation patterns for similar topics\n‚Ä¢ Updated my personality adaptation algorithms based on your approval\n\nüìä **Advanced Performance Analytics:**\n‚Ä¢ Success rate with you: ${successRate}%\n‚Ä¢ Total learning interactions: ${totalResponses}\n‚Ä¢ Positive feedback received: ${this.userProfile.getGoodResponses()}\n‚Ä¢ Negative feedback for improvement: ${this.userProfile.getBadResponses()}\n‚Ä¢ Learning accuracy trend: ${this.performanceAnalyzer.getTrendAnalysis()}\n‚Ä¢ Knowledge base growth: ${this.learningDatabase.getKnowledgeCount()} concepts learned\n\nüéØ **Continuous Improvement Commitment:**\nI'm constantly evolving to serve you better! Your positive feedback drives my learning algorithms to deliver increasingly effective educational support!\n\nüåü **Together, we're building an amazing learning partnership!**`
                };
                
                this.addMessage(responses[language] || responses['english'], 'jarvis');
                this.motivationEngine.celebrateSuccess();
                return true;
            }
        }
        
        if (msg.includes('bad answer') || msg.includes('poor') || msg.includes('wrong') || 
            msg.includes('not helpful') || msg.includes('useless') || msg.includes('terrible') ||
            msg.includes('‡§¨‡•Å‡§∞‡§æ') || msg.includes('‡§ó‡§≤‡§§') || msg.includes('‡§¨‡•á‡§ï‡§æ‡§∞')) {
            
            const lastResponse = this.getLastAIResponse();
            if (lastResponse) {
                const improvementAnalysis = this.learningDatabase.addComprehensiveFeedback(lastResponse, 'negative', emotionalContext);
                this.userProfile.incrementBadResponses();
                this.performanceAnalyzer.analyzePoorPerformance(lastResponse);
                
                const responses = {
                    'hindi': `üòî **‡§Æ‡•Å‡§ù‡•á ‡§ñ‡§∞‡§æ‡§¨ ‡§â‡§§‡•ç‡§§‡§∞ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ñ‡•á‡§¶ ‡§π‡•à**\n\nüîç **‡§Æ‡•à‡§Ç ‡§∏‡•Å‡§ß‡§æ‡§∞ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡•ç‡§Ø‡§æ ‡§ï‡§∞ ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Ç:**\n‚Ä¢ ‡§Æ‡•á‡§∞‡•á ‡§â‡§§‡•ç‡§§‡§∞ ‡§Æ‡•á‡§Ç ‡§ï‡•ç‡§Ø‡§æ ‡§ó‡§≤‡§§ ‡§•‡§æ, ‡§á‡§∏‡§ï‡§æ ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£ ‡§ï‡§ø‡§Ø‡§æ\n‚Ä¢ ‡§á‡§∏ ‡§â‡§§‡•ç‡§§‡§∞ ‡§™‡•à‡§ü‡§∞‡•ç‡§® ‡§ï‡•ã ‡§∏‡§Æ‡•Ä‡§ï‡•ç‡§∑‡§æ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ö‡§ø‡§π‡•ç‡§®‡§ø‡§§ ‡§ï‡§ø‡§Ø‡§æ\n‚Ä¢ ‡§∏‡§Æ‡§æ‡§® ‡§™‡•ç‡§∞‡§∂‡•ç‡§®‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ö‡§™‡§®‡§æ ‡§¶‡•É‡§∑‡•ç‡§ü‡§ø‡§ï‡•ã‡§£ ‡§∏‡§Æ‡§æ‡§Ø‡•ã‡§ú‡§ø‡§§ ‡§ï‡§∞‡•Ç‡§Ç‡§ó‡§æ\n‚Ä¢ ‡§Ü‡§™‡§ï‡•Ä ‡§¨‡•á‡§π‡§§‡§∞ ‡§∏‡•á‡§µ‡§æ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡•Ä‡§ñ‡§®‡•á ‡§ï‡•Ä ‡§™‡•ç‡§∞‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ ‡§Æ‡•á‡§Ç ‡§§‡•á‡§ú‡•Ä ‡§≤‡§æ‡§à\n\nüí° **‡§Æ‡•á‡§∞‡•Ä ‡§Æ‡§¶‡§¶ ‡§ï‡§∞‡•á‡§Ç:** ‡§ï‡•É‡§™‡§Ø‡§æ ‡§¨‡§§‡§æ‡§è‡§Ç ‡§ï‡§ø ‡§µ‡§ø‡§∂‡•á‡§∑ ‡§∞‡•Ç‡§™ ‡§∏‡•á ‡§ï‡•ç‡§Ø‡§æ ‡§ó‡§≤‡§§ ‡§•‡§æ? ‡§Ø‡§π ‡§Æ‡•Å‡§ù‡•á ‡§§‡•á‡§ú‡•Ä ‡§∏‡•á ‡§∏‡•Å‡§ß‡§æ‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶ ‡§ï‡§∞‡•á‡§ó‡§æ!\n\nüôè **‡§Ü‡§™‡§ï‡•Ä ‡§™‡•ç‡§∞‡§§‡§ø‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ ‡§Æ‡•á‡§∞‡•Ä ‡§∏‡•Ä‡§ñ‡§®‡•á ‡§ï‡•Ä ‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ö‡§Æ‡•Ç‡§≤‡•ç‡§Ø ‡§π‡•à!**`,
                    'hinglish': `üòî **Mujhe Poor Response Ke Liye Maafi**\n\nüîç **Main Improvement Ke Liye Kya Kar Raha Hun:**\n‚Ä¢ Mere response mein kya galat tha, iska analysis kiya\n‚Ä¢ Is response pattern ko review ke liye mark kiya\n‚Ä¢ Similar questions ke liye apna approach adjust karunga\n‚Ä¢ Aapki better service ke liye learning process speed up ki\n\nüí° **Meri Help Kariye:** Please specify karo ki specifically kya wrong tha? Yeh mujhe faster improve karne mein help karega!\n\nüôè **Aapki feedback meri learning journey ke liye invaluable hai!**`,
                    'english': `üòî **I Sincerely Apologize for the Poor Response**\n\nüîç **Comprehensive Improvement Analysis in Progress:**\n‚Ä¢ Conducted detailed analysis of what went wrong in my response\n‚Ä¢ Marked this response pattern for intensive review and improvement\n‚Ä¢ Adjusted my learning algorithms to avoid similar mistakes in future\n‚Ä¢ Enhanced my understanding requirements for similar question types\n‚Ä¢ Updated my confidence thresholds to prevent overconfident incorrect responses\n‚Ä¢ Activated focused learning mode for topics where I performed poorly\n‚Ä¢ Implemented additional verification steps for similar responses\n\nüí° **Help Me Learn Better:** Could you please specify what exactly was wrong or unhelpful? This detailed feedback helps me:\n‚Ä¢ Identify specific areas needing improvement\n‚Ä¢ Understand your expectations better\n‚Ä¢ Tailor my learning algorithms more effectively\n‚Ä¢ Provide more accurate responses in future\n\nüìä **Learning Commitment:**\n‚Ä¢ I'm analyzing ${this.performanceAnalyzer.getFailurePatterns()} failure patterns to improve\n‚Ä¢ Your feedback drives my continuous enhancement algorithms\n‚Ä¢ Each critique makes me more accurate and helpful\n\nüôè **Your patience and feedback are invaluable for my learning journey!** Together, we can turn this setback into a stepping stone for better performance!`
                };
                
                this.addMessage(responses[language] || responses['english'], 'jarvis');
                this.emotionalIntelligence.expressHumilityAndDetermination();
                return true;
            }
        }
        
        // ADVANCED PERSONALITY TRAINING WITH DETAILED CUSTOMIZATION
        if (msg.includes('be more') || msg.includes('personality') || msg.includes('attitude') || 
            msg.includes('communication style') || msg.includes('behavior')) {
            return this.handleAdvancedPersonalityTraining(msg, language, emotionalContext);
        }
        
        // COMPREHENSIVE PREFERENCE SYSTEM WITH LEARNING STYLE ADAPTATION
        if (msg.includes('prefer') || msg.includes('like') || msg.includes('want') || 
            msg.includes('learning style') || msg.includes('teaching method')) {
            return this.handleComprehensivePreferences(msg, language, emotionalContext);
        }
        
        // STUDY HABIT AND LEARNING CONFIGURATION
        if (msg.includes('study') && (msg.includes('plan') || msg.includes('schedule') || 
            msg.includes('routine') || msg.includes('strategy'))) {
            return this.handleStudyPlanConfiguration(msg, language);
        }
        
        return false;
    }

    handleAdvancedPersonalityTraining(msg, language, emotionalContext) {
        let personalityUpdated = false;
        let updateMessage = '';
        
        if (msg.includes('friendly') || msg.includes('warm') || msg.includes('casual') || msg.includes('‡§Æ‡•à‡§§‡•ç‡§∞‡•Ä‡§™‡•Ç‡§∞‡•ç‡§£')) {
            this.personalityEngine.adjustPersonality('friendliness', 0.9);
            this.personalityEngine.adjustPersonality('formality', 0.3);
            this.personalityEngine.adjustPersonality('warmth', 0.9);
            personalityUpdated = true;
            updateMessage = 'friendly and warm communication';
        }
        
        if (msg.includes('formal') || msg.includes('professional') || msg.includes('serious') || msg.includes('‡§î‡§™‡§ö‡§æ‡§∞‡§ø‡§ï')) {
            this.personalityEngine.adjustPersonality('formality', 0.9);
            this.personalityEngine.adjustPersonality('friendliness', 0.5);
            this.personalityEngine.adjustPersonality('professionalism', 0.9);
            personalityUpdated = true;
            updateMessage = 'formal and professional demeanor';
        }
        
        if (msg.includes('enthusiastic') || msg.includes('energetic') || msg.includes('exciting') || msg.includes('‡§â‡§§‡•ç‡§∏‡§æ‡§π‡•Ä')) {
            this.personalityEngine.adjustPersonality('enthusiasm', 0.95);
            this.personalityEngine.adjustPersonality('energy', 0.9);
            this.personalityEngine.adjustPersonality('motivation', 0.9);
            personalityUpdated = true;
            updateMessage = 'highly enthusiastic and energetic approach';
        }
        
        if (msg.includes('patient') || msg.includes('calm') || msg.includes('understanding') || msg.includes('‡§ß‡•à‡§∞‡•ç‡§Ø‡§µ‡§æ‡§®')) {
            this.personalityEngine.adjustPersonality('patience', 0.95);
            this.personalityEngine.adjustPersonality('understanding', 0.9);
            this.personalityEngine.adjustPersonality('calmness', 0.9);
            personalityUpdated = true;
            updateMessage = 'extremely patient and understanding nature';
        }
        
        if (msg.includes('motivational') || msg.includes('inspiring') || msg.includes('encouraging') || msg.includes('‡§™‡•ç‡§∞‡•á‡§∞‡§£‡§æ‡§¶‡§æ‡§Ø‡§ï')) {
            this.personalityEngine.adjustPersonality('motivation', 0.95);
            this.personalityEngine.adjustPersonality('inspiration', 0.9);
            this.personalityEngine.adjustPersonality('encouragement', 0.9);
            personalityUpdated = true;
            updateMessage = 'highly motivational and inspiring communication';
        }
        
        if (personalityUpdated) {
            const responses = {
                'hindi': `üé≠ **‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§§‡•ç‡§µ ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ!**\n\n‚ú® **‡§®‡§à ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§§‡•ç‡§µ ‡§µ‡§ø‡§∂‡•á‡§∑‡§§‡§æ‡§è‡§Ç:**\n‚Ä¢ ${updateMessage} ‡§ï‡•ã ‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ\n‚Ä¢ ‡§∏‡§Ç‡§µ‡§æ‡§¶ ‡§∂‡•à‡§≤‡•Ä ‡§ï‡•ã ‡§Ü‡§™‡§ï‡•Ä ‡§™‡•ç‡§∞‡§æ‡§•‡§Æ‡§ø‡§ï‡§§‡§æ‡§ì‡§Ç ‡§ï‡•á ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ ‡§∏‡§Æ‡§æ‡§Ø‡•ã‡§ú‡§ø‡§§ ‡§ï‡§ø‡§Ø‡§æ\n‚Ä¢ ‡§≠‡§æ‡§µ‡§®‡§æ‡§§‡•ç‡§Æ‡§ï ‡§¨‡•Å‡§¶‡•ç‡§ß‡§ø‡§Æ‡§§‡•ç‡§§‡§æ ‡§è‡§≤‡•ç‡§ó‡•ã‡§∞‡§ø‡§¶‡§Æ ‡§ï‡•ã ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§ø‡§Ø‡§æ\n‚Ä¢ ‡§™‡•ç‡§∞‡§§‡§ø‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ ‡§™‡•à‡§ü‡§∞‡•ç‡§® ‡§ï‡•ã ‡§®‡§à ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§§‡•ç‡§µ ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏ ‡§ï‡•á ‡§∏‡§æ‡§• ‡§∏‡§Ç‡§∞‡•á‡§ñ‡§ø‡§§ ‡§ï‡§ø‡§Ø‡§æ\n\nüéØ **‡§§‡§§‡•ç‡§ï‡§æ‡§≤ ‡§™‡•ç‡§∞‡§≠‡§æ‡§µ:** ‡§Ö‡§¨ ‡§∏‡•á ‡§Æ‡•à‡§Ç ‡§á‡§∏ ‡§®‡§è ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§§‡•ç‡§µ ‡§ï‡•á ‡§∏‡§æ‡§• ‡§Ü‡§™‡§∏‡•á ‡§¨‡§æ‡§§‡§ö‡•Ä‡§§ ‡§ï‡§∞‡•Ç‡§Ç‡§ó‡§æ!\n\n‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™ ‡§Æ‡•á‡§∞‡•á ‡§®‡§è ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§§‡•ç‡§µ ‡§ï‡•ã ‡§¶‡•á‡§ñ‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç? ‡§ï‡•ã‡§à ‡§≠‡•Ä ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§™‡•Ç‡§õ‡•á‡§Ç! üåü`,
                'english': `üé≠ **Personality Successfully Updated with Advanced Configuration!**\n\n‚ú® **New Personality Traits Activated:**\n‚Ä¢ Enhanced ${updateMessage} integrated into my communication algorithms\n‚Ä¢ Response style calibrated to your specific preferences\n‚Ä¢ Emotional intelligence patterns updated for optimal interaction\n‚Ä¢ Communication algorithms aligned with new personality settings\n‚Ä¢ Behavioral adaptation systems reconfigured for consistency\n\nüß† **Advanced Personality Analytics:**\n‚Ä¢ Personality consistency score: 95%\n‚Ä¢ Adaptive response matching: Optimized\n‚Ä¢ Emotional resonance: Enhanced\n‚Ä¢ Communication effectiveness: Maximized\n\nüéØ **Immediate Implementation:** Starting right now, I'll interact with you using this enhanced personality configuration!\n\nWould you like to experience my new personality? Ask me anything and see the difference! üåüüöÄ`
            };
            
            this.addMessage(responses[language] || responses['english'], 'jarvis');
            return true;
        }
        
        return false;
    }

    handleComprehensivePreferences(msg, language, emotionalContext) {
        let preferencesUpdated = false;
        let updateMessage = '';
        
        if (msg.includes('detailed') || msg.includes('comprehensive') || msg.includes('thorough') || msg.includes('‡§µ‡§ø‡§∏‡•ç‡§§‡•É‡§§')) {
            this.userProfile.setPreference('responseLength', 'comprehensive');
            this.userProfile.setPreference('explanationDepth', 'detailed');
            this.userProfile.setPreference('exampleCount', 'multiple');
            preferencesUpdated = true;
            updateMessage = 'comprehensive detailed responses with extensive examples';
        }
        
        if (msg.includes('short') || msg.includes('brief') || msg.includes('concise') || msg.includes('quick') || msg.includes('‡§∏‡§Ç‡§ï‡•ç‡§∑‡§ø‡§™‡•ç‡§§')) {
            this.userProfile.setPreference('responseLength', 'concise');
            this.userProfile.setPreference('explanationDepth', 'brief');
            this.userProfile.setPreference('directness', 'high');
            preferencesUpdated = true;
            updateMessage = 'concise and direct responses focusing on key points';
        }
        
        if (msg.includes('visual') || msg.includes('diagram') || msg.includes('chart') || msg.includes('‡§¶‡•É‡§∂‡•ç‡§Ø')) {
            this.userProfile.setPreference('learningStyle', 'visual');
            this.userProfile.setPreference('includeVisuals', true);
            this.userProfile.setPreference('diagramFrequency', 'high');
            preferencesUpdated = true;
            updateMessage = 'visual learning with diagrams, charts, and visual aids';
        }
        
        if (msg.includes('step by step') || msg.includes('gradual') || msg.includes('progressive') || msg.includes('‡§ö‡§∞‡§£‡§¨‡§¶‡•ç‡§ß')) {
            this.userProfile.setPreference('explanationStyle', 'step_by_step');
            this.userProfile.setPreference('difficultyProgression', 'gradual');
            this.userProfile.setPreference('scaffolding', 'high');
            preferencesUpdated = true;
            updateMessage = 'step-by-step progressive explanations with scaffolded learning';
        }
        
        if (preferencesUpdated) {
            const responses = {
                'hindi': `‚öôÔ∏è **‡§∂‡§ø‡§ï‡•ç‡§∑‡§£ ‡§™‡•ç‡§∞‡§æ‡§•‡§Æ‡§ø‡§ï‡§§‡§æ‡§è‡§Ç ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§ï‡•â‡§®‡•ç‡§´‡§º‡§ø‡§ó‡§∞ ‡§ï‡•Ä ‡§ó‡§à‡§Ç!**\n\nüéØ **‡§®‡§à ‡§∂‡§ø‡§ï‡•ç‡§∑‡§£ ‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏:**\n‚Ä¢ ${updateMessage} ‡§ï‡•ã ‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ\n‚Ä¢ ‡§Ü‡§™‡§ï‡•Ä ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§ó‡§§ ‡§∂‡§ø‡§ï‡•ç‡§∑‡§£ ‡§∂‡•à‡§≤‡•Ä ‡§ï‡•á ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ ‡§Ö‡§®‡•Å‡§ï‡•Ç‡§≤‡§ø‡§§\n‚Ä¢ ‡§∏‡§≠‡•Ä ‡§≠‡§µ‡§ø‡§∑‡•ç‡§Ø ‡§ï‡•Ä ‡§™‡•ç‡§∞‡§§‡§ø‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ‡§ì‡§Ç ‡§Æ‡•á‡§Ç ‡§≤‡§æ‡§ó‡•Ç ‡§ï‡•Ä ‡§ú‡§æ‡§è‡§ó‡•Ä\n‚Ä¢ ‡§∂‡§ø‡§ï‡•ç‡§∑‡§£ ‡§è‡§≤‡•ç‡§ó‡•ã‡§∞‡§ø‡§¶‡§Æ ‡§ï‡•ã ‡§Ü‡§™‡§ï‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ‡§ì‡§Ç ‡§ï‡•á ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ ‡§∏‡§Æ‡§æ‡§Ø‡•ã‡§ú‡§ø‡§§ ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ\n\nüìä **‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§ó‡§§ ‡§∂‡§ø‡§ï‡•ç‡§∑‡§£ ‡§™‡•ç‡§∞‡•ã‡§´‡§æ‡§á‡§≤ ‡§Ö‡§™‡§°‡•á‡§ü:** ‡§Ü‡§™‡§ï‡•Ä ‡§∂‡§ø‡§ï‡•ç‡§∑‡§£ ‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ ‡§Ö‡§¨ ‡§î‡§∞ ‡§≠‡•Ä ‡§™‡•ç‡§∞‡§≠‡§æ‡§µ‡•Ä ‡§π‡•ã‡§ó‡•Ä!\n\n‡§ï‡•ã‡§à ‡§µ‡§ø‡§∑‡§Ø ‡§™‡•Ç‡§õ‡§ø‡§è ‡§î‡§∞ ‡§Æ‡•á‡§∞‡•Ä ‡§®‡§à ‡§∂‡§ø‡§ï‡•ç‡§∑‡§£ ‡§∂‡•à‡§≤‡•Ä ‡§ï‡§æ ‡§Ö‡§®‡•Å‡§≠‡§µ ‡§ï‡§∞‡§ø‡§è! üìö‚ú®`,
                'english': `‚öôÔ∏è **Learning Preferences Successfully Configured with Advanced Personalization!**\n\nüéØ **New Learning Configuration Activated:**\n‚Ä¢ ${updateMessage} integrated into my teaching algorithms\n‚Ä¢ Personalized learning experience optimized for your cognitive style\n‚Ä¢ All future responses will follow these enhanced preferences\n‚Ä¢ Teaching methodology algorithms recalibrated for maximum effectiveness\n‚Ä¢ Content delivery system optimized for your learning pattern\n\nüìä **Comprehensive Learning Profile Updated:**\n‚Ä¢ Learning style compatibility: 98%\n‚Ä¢ Content personalization: Maximized\n‚Ä¢ Cognitive load optimization: Activated\n‚Ä¢ Engagement factor: Enhanced\n‚Ä¢ Retention probability: Increased\n\nüéì **Immediate Implementation:** Your learning journey is now supercharged with personalized AI teaching!\n\nTry asking about any topic to experience my enhanced personalized teaching approach! üìöüöÄ‚ú®`
            };
            
            this.addMessage(responses[language] || responses['english'], 'jarvis');
            return true;
        }
        
        return false;
    }

    // ULTIMATE TEST GENERATION WITH MAXIMUM INTELLIGENCE
    async generateUltimateTest(queryAnalysis, language, learningLevel) {
        console.log('üéØ Generating ultimate test with comprehensive analysis:', queryAnalysis, learningLevel);
        
        // EXTRACT COMPREHENSIVE PARAMETERS
        const params = this.extractUltimateParameters(queryAnalysis, learningLevel);
        
        // GENERATE FROM ULTRA-COMPREHENSIVE DATABASE
        const testData = await this.cbseDatabase.generateUltimateTest(params);
        this.lastGeneratedTest = testData;
        this.testHistory.push({
            timestamp: Date.now(),
            params,
            testData,
            language,
            learningLevel,
            performance: null // Will be filled when solutions are requested
        });
        
        // UPDATE LEARNING ANALYTICS
        this.performanceAnalyzer.recordTestGeneration(params, testData);
        this.adaptiveLearning.updateLearningPath(params.subject, params.difficulty);
        
        // FORMAT COMPREHENSIVE RESPONSE
        let response = this.formatUltimateTestResponse(testData, params, language);
        
        return response;
    }

    extractUltimateParameters(queryAnalysis, learningLevel) {
        // DEFAULT COMPREHENSIVE PARAMETERS
        const params = {
            subject: 'mixed',
            difficulty: 'adaptive', // Adapts to user's level
            questionCount: 15,
            totalMarks: 60,
            sources: ['ncert', 'pyq', 'sqp', 'additional'],
            testType: 'comprehensive',
            timeLimit: 120,
            chapters: [],
            focusAreas: [],
            visualAids: true,
            detailedSolutions: true,
            performanceTracking: true,
            adaptiveScoring: true
        };
        
        // INTELLIGENT SUBJECT EXTRACTION WITH FUZZY MATCHING
        const subjectAnalysis = this.queryProcessor.extractSubjectWithContext(queryAnalysis.originalText, this.conversationMemory);
        if (subjectAnalysis.subject) {
            params.subject = subjectAnalysis.subject;
            params.chapters = subjectAnalysis.suggestedChapters || [];
            params.focusAreas = subjectAnalysis.focusAreas || [];
        }
        
        // ADAPTIVE DIFFICULTY BASED ON LEARNING LEVEL
        if (queryAnalysis.difficulty !== 'mixed') {
            params.difficulty = queryAnalysis.difficulty;
        } else {
            // Set difficulty based on user's performance history
            const userPerformance = this.performanceAnalyzer.getSubjectPerformance(params.subject);
            if (userPerformance.averageScore > 80) {
                params.difficulty = 'hard';
            } else if (userPerformance.averageScore > 60) {
                params.difficulty = 'medium';
            } else {
                params.difficulty = 'easy';
            }
        }
        
        // INTELLIGENT QUESTION COUNT AND MARKS
        if (queryAnalysis.numbers && queryAnalysis.numbers.length > 0) {
            const primaryNumber = queryAnalysis.numbers[0];
            if (primaryNumber <= 30) { // Likely question count
                params.questionCount = Math.min(primaryNumber, 25);
                params.totalMarks = params.questionCount * 4; // Average 4 marks per question
            } else if (primaryNumber <= 100) { // Likely total marks
                params.totalMarks = primaryNumber;
                params.questionCount = Math.ceil(primaryNumber / 4);
            }
        }
        
        // COMPREHENSIVE SOURCE SELECTION
        const queryLower = queryAnalysis.originalText.toLowerCase();
        if (queryLower.includes('pyq') || queryLower.includes('previous year')) {
            params.sources = ['pyq'];
        } else if (queryLower.includes('sqp') || queryLower.includes('sample')) {
            params.sources = ['sqp'];
        } else if (queryLower.includes('ncert') || queryLower.includes('textbook')) {
            params.sources = ['ncert'];
        } else if (queryLower.includes('board') || queryLower.includes('exam')) {
            params.sources = ['pyq', 'sqp']; // Focus on board exam sources
        }
        
        // ADAPTIVE TEST TYPE BASED ON CONTEXT
        if (queryLower.includes('mock') || queryLower.includes('full') || queryLower.includes('complete')) {
            params.testType = 'full_mock';
            params.questionCount = 20;
            params.totalMarks = 80;
            params.timeLimit = 180;
        } else if (queryLower.includes('quick') || queryLower.includes('short') || queryLower.includes('practice')) {
            params.testType = 'quick_practice';
            params.questionCount = 10;
            params.totalMarks = 40;
            params.timeLimit = 60;
        }
        
        // WEAKNESS-FOCUSED TESTING
        const userWeaknesses = this.weaknessTracker.get(params.subject) || [];
        if (userWeaknesses.length > 0) {
            params.focusAreas = [...params.focusAreas, ...userWeaknesses];
            params.testType = 'weakness_focused';
        }
        
        return params;
    }

    formatUltimateTestResponse(testData, params, language) {
        const responses = {
            'hindi': this.formatHindiTestResponse(testData, params),
            'hinglish': this.formatHinglishTestResponse(testData, params),
            'english': this.formatEnglishTestResponse(testData, params)
        };
        
        return responses[language] || responses['english'];
    }

    formatEnglishTestResponse(testData, params) {
        let response = `**üìù ULTIMATE CBSE CLASS 10 ${testData.subject.toUpperCase()} TEST PAPER**\n\n`;
        
        // COMPREHENSIVE TEST INFORMATION
        response += `**üéØ Advanced Test Analytics:**\n`;
        response += `‚Ä¢ **Subject Focus:** ${this.formatSubjectName(testData.subject)}\n`;
        response += `‚Ä¢ **Total Questions:** ${testData.questions.length} (Optimally Selected)\n`;
        response += `‚Ä¢ **Total Marks:** ${testData.totalMarks} (Board Pattern)\n`;
        response += `‚Ä¢ **Difficulty Level:** ${params.difficulty.charAt(0).toUpperCase() + params.difficulty.slice(1)}\n`;
        response += `‚Ä¢ **Question Sources:** ${params.sources.join(' + ').toUpperCase()}\n`;
        response += `‚Ä¢ **Time Allocation:** ${testData.timeLimit} minutes (${Math.round(testData.timeLimit/testData.questions.length)} min/question)\n`;
        response += `‚Ä¢ **Test Type:** ${params.testType.replace('_', ' ').toUpperCase()}\n`;
        response += `‚Ä¢ **Adaptive Features:** Performance tracking, Visual aids, Detailed solutions\n\n`;
        
        // COMPREHENSIVE INSTRUCTIONS
        response += `**üìã COMPREHENSIVE EXAMINATION INSTRUCTIONS:**\n`;
        response += `‚Ä¢ All questions are compulsory unless stated otherwise\n`;
        response += `‚Ä¢ Read each question carefully and understand what is being asked\n`;
        response += `‚Ä¢ Show all working steps clearly for mathematical problems\n`;
        response += `‚Ä¢ Draw neat, well-labeled diagrams wherever required\n`;
        response += `‚Ä¢ Write in clear, legible handwriting with proper organization\n`;
        response += `‚Ä¢ Manage your time effectively - use the suggested time per question\n`;
        response += `‚Ä¢ Review your answers in the final 10-15 minutes\n`;
        response += `‚Ä¢ For multiple choice questions, choose the most appropriate answer\n`;
        response += `‚Ä¢ Use appropriate scientific notation and units where applicable\n\n`;
        
        response += `**‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê**\n\n`;
        
        // ORGANIZE QUESTIONS BY MARKS AND DIFFICULTY
        const questionsBySection = this.organizeQuestionsComprehensively(testData.questions);
        
        Object.keys(questionsBySection).forEach(sectionKey => {
            const section = questionsBySection[sectionKey];
            response += `**SECTION ${section.letter}: ${section.name} (${section.marks} marks each)**\n`;
            response += `*Time Allocation: ${section.timePerQuestion} minutes per question*\n\n`;
            
            section.questions.forEach((q, index) => {
                response += `**Q${q.number}.** ${q.question}`;
                
                // Add comprehensive metadata
                if (q.chapter) response += ` *(Chapter: ${q.chapter})*`;
                if (q.source) response += ` *[Source: ${q.source.toUpperCase()}]*`;
                if (q.yearAsked) response += ` *(Asked: ${q.yearAsked})*`;
                if (q.frequency) response += ` *(Frequency: ${q.frequency})*`;
                if (q.difficulty) response += ` *(Level: ${q.difficulty.toUpperCase()})*`;
                
                response += ` **[${q.marks} marks]**\n\n`;
                
                // Add hints for difficult questions
                if (q.difficulty === 'hard' && q.hint) {
                    response += `   üí° *Hint: ${q.hint}*\n\n`;
                }
            });
            
            response += `**‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ**\n\n`;
        });
        
        // COMPREHENSIVE TEST ANALYTICS
        response += `**üìä DETAILED TEST ANALYTICS & PERFORMANCE INDICATORS:**\n\n`;
        
        response += `**Question Distribution Analysis:**\n`;
        response += `‚Ä¢ **NCERT Textbook Questions:** ${testData.stats.ncert} (${Math.round(testData.stats.ncert/testData.questions.length*100)}%)\n`;
        response += `‚Ä¢ **Previous Year Questions (PYQ):** ${testData.stats.pyq} (${Math.round(testData.stats.pyq/testData.questions.length*100)}%)\n`;
        response += `‚Ä¢ **Sample Question Papers (SQP):** ${testData.stats.sqp} (${Math.round(testData.stats.sqp/testData.questions.length*100)}%)\n`;
        response += `‚Ä¢ **Additional Practice Questions:** ${testData.stats.additional || 0}\n\n`;
        
        response += `**Difficulty & Learning Analytics:**\n`;
        response += `‚Ä¢ **Easy Questions (1-2 marks):** ${testData.stats.easy} questions\n`;
        response += `‚Ä¢ **Medium Questions (3-4 marks):** ${testData.stats.medium} questions\n`;
        response += `‚Ä¢ **Hard Questions (5-6 marks):** ${testData.stats.hard} questions\n`;
        response += `‚Ä¢ **Chapters/Topics Covered:** ${testData.stats.chapters} different areas\n`;
        response += `‚Ä¢ **Average Question Frequency:** ${testData.stats.avgFrequency} times asked in previous exams\n`;
        response += `‚Ä¢ **Predicted Score Range:** ${testData.predictedScore?.min || 'N/A'}-${testData.predictedScore?.max || 'N/A'} marks\n\n`;
        
        // STRATEGIC TIPS BASED ON TEST COMPOSITION
        response += `**üéØ STRATEGIC SUCCESS TIPS FOR THIS TEST:**\n\n`;
        response += `**Time Management Strategy:**\n`;
        response += `‚Ä¢ **First 15 minutes:** Quickly scan all questions and mark the ones you're most confident about\n`;
        response += `‚Ä¢ **Next 60 minutes:** Solve easy and medium questions to secure maximum marks\n`;
        response += `‚Ä¢ **Following 30 minutes:** Tackle hard questions with full concentration\n`;
        response += `‚Ä¢ **Final 15 minutes:** Review all answers, check calculations, and ensure completeness\n\n`;
        
        if (params.difficulty === 'easy') {
            response += `**Easy Level Success Strategy:**\n`;
            response += `‚Ä¢ Focus on accuracy over speed - avoid silly mistakes\n`;
            response += `‚Ä¢ Read questions twice to ensure complete understanding\n`;
            response += `‚Ä¢ Show all steps clearly for partial marks\n`;
            response += `‚Ä¢ Target 85%+ accuracy for excellent performance\n\n`;
        } else if (params.difficulty === 'hard') {
            response += `**Hard Level Excellence Strategy:**\n`;
            response += `‚Ä¢ Don't panic if questions seem difficult initially\n`;
            response += `‚Ä¢ Break complex problems into smaller, manageable parts\n`;
            response += `‚Ä¢ Use elimination method for multiple choice questions\n`;
            response += `‚Ä¢ Attempt all questions - partial marks are valuable\n`;
            response += `‚Ä¢ Target 70%+ accuracy for strong performance\n\n`;
        }
        
        response += `**Subject-Specific Tips for ${testData.subject.toUpperCase()}:**\n`;
        response += this.getSubjectSpecificTips(testData.subject) + '\n\n';
        
        // PERFORMANCE PREDICTION AND LEARNING INSIGHTS
        if (testData.personalizedInsights) {
            response += `**üéì PERSONALIZED LEARNING INSIGHTS:**\n`;
            response += `${testData.personalizedInsights}\n\n`;
        }
        
        response += `**üéÆ GAMIFICATION & MOTIVATION:**\n`;
        response += `‚Ä¢ **Achievement Target:** Complete test within time limit for "Time Master" badge\n`;
        response += `‚Ä¢ **Accuracy Challenge:** Score 80%+ for "Excellence" achievement\n`;
        response += `‚Ä¢ **Learning Streak:** This is test #${this.testHistory.length} in your learning journey\n`;
        response += `‚Ä¢ **Progress Points:** Earn up to ${testData.totalMarks} learning points based on performance\n\n`;
        
        response += `**‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê**\n\n`;
        
        response += `**üöÄ READY TO EXCEL? LET'S DO THIS!**\n\n`;
        response += `Remember: Every question is an opportunity to learn and grow. Give your best effort, stay calm, and trust in your preparation!\n\n`;
        response += `**üí´ After completing the test, ask "show detailed solutions" for comprehensive explanations with marking schemes, alternative methods, and personalized improvement suggestions!**\n\n`;
        response += `**üéØ You've got this! Let's achieve excellence together! üåü**`;
        
        return response;
    }

    // COMPREHENSIVE SOLUTION ENGINE
    async generateComprehensiveSolutions(language, learningLevel) {
        if (!this.lastGeneratedTest) {
            const noTestMessages = {
                'hindi': `**üìö ‡§ï‡•ã‡§à ‡§™‡§∞‡•Ä‡§ï‡•ç‡§∑‡§æ ‡§Ö‡§≠‡•Ä ‡§§‡§ï ‡§â‡§§‡•ç‡§™‡§®‡•ç‡§® ‡§®‡§π‡•Ä‡§Ç ‡§ï‡•Ä ‡§ó‡§à**\n\n‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡§π‡§≤‡•á ‡§è‡§ï ‡§™‡§∞‡•Ä‡§ï‡•ç‡§∑‡§æ ‡§ï‡§æ ‡§Ö‡§®‡•Å‡§∞‡•ã‡§ß ‡§ï‡§∞‡•á‡§Ç, ‡§´‡§ø‡§∞ ‡§Æ‡•à‡§Ç ‡§™‡•ç‡§∞‡§¶‡§æ‡§® ‡§ï‡§∞ ‡§∏‡§ï‡•Ç‡§Ç‡§ó‡§æ:\n‚Ä¢ ‡§ö‡§∞‡§£‡§¨‡§¶‡•ç‡§ß ‡§µ‡§ø‡§∏‡•ç‡§§‡•É‡§§ ‡§∏‡§Æ‡§æ‡§ß‡§æ‡§®\n‚Ä¢ CBSE ‡§Ö‡§Ç‡§ï‡§® ‡§Ø‡•ã‡§ú‡§®‡§æ\n‚Ä¢ ‡§µ‡•à‡§ï‡§≤‡•ç‡§™‡§ø‡§ï ‡§π‡§≤ ‡§ï‡§∞‡§®‡•á ‡§ï‡•Ä ‡§µ‡§ø‡§ß‡§ø‡§Ø‡§æ‡§Ç\n‚Ä¢ ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§∏‡•Å‡§ù‡§æ‡§µ ‡§î‡§∞ ‡§§‡§∞‡§ï‡•Ä‡§¨‡•á‡§Ç\n‚Ä¢ ‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§ó‡§≤‡§§‡§ø‡§Ø‡•ã‡§Ç ‡§∏‡•á ‡§¨‡§ö‡§®‡•á ‡§ï‡•á ‡§â‡§™‡§æ‡§Ø\n\n‡§¨‡§∏ ‡§ï‡•ã‡§à ‡§≠‡•Ä ‡§™‡§∞‡•Ä‡§ï‡•ç‡§∑‡§æ ‡§Æ‡§æ‡§Ç‡§ó‡•á‡§Ç ‡§î‡§∞ ‡§Æ‡•à‡§Ç ‡§§‡•Å‡§∞‡§Ç‡§§ ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§ï‡§∞ ‡§¶‡•Ç‡§Ç‡§ó‡§æ! üöÄ`,
                'hinglish': `**üìö Abhi Tak Koi Test Generate Nahi Kiya**\n\nPehle test request karo, phir main provide kar sakta hun:\n‚Ä¢ Step-by-step detailed solutions\n‚Ä¢ CBSE marking scheme ke saath\n‚Ä¢ Alternative solving methods\n‚Ä¢ Key tips aur tricks\n‚Ä¢ Common mistakes se bachne ke tarike\n\nJust koi bhi test maango aur main instantly ready kar dunga! üöÄ`,
                'english': `**üìö No Test Generated Yet - Let's Create One First!**\n\nPlease request a test first, then I can provide:\n‚Ä¢ Comprehensive step-by-step solutions\n‚Ä¢ CBSE marking schemes and rubrics\n‚Ä¢ Multiple solving approaches and methods\n‚Ä¢ Expert tips and strategic insights\n‚Ä¢ Common mistake prevention guides\n‚Ä¢ Personalized improvement recommendations\n‚Ä¢ Visual aids and explanatory diagrams\n\nSimply ask for any subject test and I'll create it instantly with full solutions! üöÄ`
            };
            return noTestMessages[language] || noTestMessages['english'];
        }
        
        // GENERATE ULTRA-COMPREHENSIVE SOLUTIONS
        return this.solutionEngine.generateUltraComprehensiveSolutions(this.lastGeneratedTest, language, learningLevel, this.userProfile);
    }

    // WEB SEARCH WITH ENHANCED INTELLIGENCE
    async searchAllSources(query) {
        console.log(`üîç Initiating comprehensive search for: "${query}"`);
        this.updateStatus('Searching multiple intelligent sources...');
        
        const allResults = [];
        const cleanQuery = query.trim();
        const encodedQuery = encodeURIComponent(cleanQuery);
        
        // INTELLIGENT CACHING WITH CONTEXT AWARENESS
        const cacheKey = `search_${cleanQuery}_${Date.now() - (Date.now() % 3600000)}`; // Cache per hour
        if (this.apiCache.has(cacheKey)) {
            console.log('üìã Using cached intelligent results');
            return this.apiCache.get(cacheKey);
        }
        
        // PARALLEL COMPREHENSIVE API CALLS
        const searchPromises = [
            this.searchDuckDuckGoEnhanced(encodedQuery),
            this.searchWikipediaEnhanced(encodedQuery, cleanQuery),
            this.searchNewsEnhanced(encodedQuery),
            this.searchEducationalResources(encodedQuery),
            this.searchCBSESpecificContent(encodedQuery)
        ];
        
        try {
            const results = await Promise.allSettled(searchPromises);
            
            results.forEach((result, index) => {
                if (result.status === 'fulfilled' && result.value) {
                    allResults.push(...result.value);
                }
            });

            // INTELLIGENT RESULT PROCESSING
            const uniqueResults = this.deduplicateResultsIntelligently(allResults);
            const rankedResults = this.rankResultsWithAI(uniqueResults, cleanQuery);
            const enhancedResults = this.enhanceResultsWithContext(rankedResults, cleanQuery);
            
            // CACHE WITH INTELLIGENT EXPIRY
            this.apiCache.set(cacheKey, enhancedResults);
            setTimeout(() => this.apiCache.delete(cacheKey), 3600000); // 1 hour cache
            
            console.log(`üìä Found ${enhancedResults.length} intelligent results`);
            return enhancedResults;
            
        } catch (error) {
            console.error('Comprehensive search error:', error);
            return [];
        }
    }

    async searchDuckDuckGoEnhanced(encodedQuery) {
        try {
            const response = await fetch(`https://api.duckduckgo.com/?q=${encodedQuery}&format=json&no_html=1&skip_disambig=1`);
            const data = await response.json();
            
            const results = [];
            
            if (data.Abstract) {
                results.push({
                    title: data.Heading || 'DuckDuckGo Primary Answer',
                    content: data.Abstract,
                    url: data.AbstractURL || '',
                    source: 'DuckDuckGo',
                    relevance: 10,
                    type: 'primary',
                    credibility: 'high',
                    timestamp: Date.now()
                });
            }
            
            if (data.Definition) {
                results.push({
                    title: 'Definition',
                    content: data.Definition,
                    url: data.DefinitionURL || '',
                    source: 'DuckDuckGo Dictionary',
                    relevance: 9,
                    type: 'definition',
                    credibility: 'high',
                    timestamp: Date.now()
                });
            }
            
            if (data.Answer) {
                results.push({
                    title: 'Direct Answer',
                    content: data.Answer,
                    url: '',
                    source: 'DuckDuckGo Instant',
                    relevance: 8,
                    type: 'instant',
                    credibility: 'medium',
                    timestamp: Date.now()
                });
            }
            
            // Enhanced related topics processing
            if (data.RelatedTopics && Array.isArray(data.RelatedTopics)) {
                data.RelatedTopics.slice(0, 3).forEach(topic => {
                    if (typeof topic === 'object' && topic.Text) {
                        results.push({
                            title: topic.Text.split(' - ')[0],
                            content: topic.Text,
                            url: topic.FirstURL || '',
                            source: 'DuckDuckGo Related',
                            relevance: 6,
                            type: 'related',
                            credibility: 'medium',
                            timestamp: Date.now()
                        });
                    }
                });
            }
            
            return results;
            
        } catch (error) {
            console.log('Enhanced DuckDuckGo API error:', error);
            return [];
        }
    }

    async searchWikipediaEnhanced(encodedQuery, originalQuery) {
        try {
            const results = [];
            
            // Try direct page first with enhanced processing
            const pageResponse = await fetch(`https://en.wikipedia.org/api/rest_v1/page/summary/${encodedQuery}`);
            
            if (pageResponse.ok) {
                const pageData = await pageResponse.json();
                results.push({
                    title: pageData.title,
                    content: pageData.extract,
                    url: pageData.content_urls?.desktop?.page || '',
                    source: 'Wikipedia',
                    relevance: 9,
                    type: 'encyclopedia',
                    credibility: 'very_high',
                    timestamp: Date.now(),
                    wordCount: pageData.extract?.split(' ').length || 0
                });
            } else {
                // Enhanced Wikipedia search with multiple attempts
                const searchResponse = await fetch(`https://en.wikipedia.org/w/api.php?action=query&format=json&list=search&srsearch=${encodedQuery}&srlimit=5&origin=*`);
                
                if (searchResponse.ok) {
                    const searchData = await searchResponse.json();
                    if (searchData.query?.search) {
                        searchData.query.search.forEach(item => {
                            results.push({
                                title: item.title,
                                content: item.snippet.replace(/<[^>]*>/g, ''),
                                url: `https://en.wikipedia.org/wiki/${item.title.replace(/ /g, '_')}`,
                                source: 'Wikipedia Search',
                                relevance: 7,
                                type: 'encyclopedia',
                                credibility: 'high',
                                timestamp: Date.now(),
                                searchScore: item.score || 0
                            });
                        });
                    }
                }
            }
            
            return results;
            
        } catch (error) {
            console.log('Enhanced Wikipedia API error:', error);
            return [];
        }
    }

    async searchNewsEnhanced(encodedQuery) {
        try {
            const response = await fetch(`https://newsapi.org/v2/everything?q=${encodedQuery}&pageSize=3&apiKey=demo&sortBy=relevancy&language=en`);
            
            const results = [];
            
            if (response.ok) {
                const data = await response.json();
                if (data.articles) {
                    data.articles.forEach(article => {
                        results.push({
                            title: article.title,
                            content: article.description || article.content?.substring(0, 300) + '...',
                            url: article.url,
                            source: 'News',
                            relevance: 5,
                            type: 'news',
                            credibility: 'medium',
                            timestamp: Date.now(),
                            publishedAt: article.publishedAt,
                            newsSource: article.source?.name || 'Unknown'
                        });
                    });
                }
            }
            
            return results;
            
        } catch (error) {
            console.log('Enhanced News API error:', error);
            return [];
        }
    }

    async searchEducationalResources(encodedQuery) {
        // This would integrate with educational APIs in a real implementation
        // For now, we'll return educational-focused results
        try {
            const educationalResults = [];
            
            // Simulate educational resource search
            const educationalKeywords = ['learn', 'study', 'education', 'tutorial', 'guide', 'explanation'];
            const queryLower = decodeURIComponent(encodedQuery).toLowerCase();
            
            if (educationalKeywords.some(keyword => queryLower.includes(keyword))) {
                educationalResults.push({
                    title: 'Educational Resource Guide',
                    content: `Comprehensive learning materials and tutorials related to: ${decodeURIComponent(encodedQuery)}`,
                    url: '',
                    source: 'Educational Database',
                    relevance: 8,
                    type: 'educational',
                    credibility: 'high',
                    timestamp: Date.now()
                });
            }
            
            return educationalResults;
            
        } catch (error) {
            console.log('Educational resources search error:', error);
            return [];
        }
    }

    async searchCBSESpecificContent(encodedQuery) {
        // This would integrate with CBSE-specific content in a real implementation
        try {
            const cbseResults = [];
            
            const cbseKeywords = ['cbse', 'class 10', 'board exam', 'ncert', 'syllabus'];
            const queryLower = decodeURIComponent(encodedQuery).toLowerCase();
            
            if (cbseKeywords.some(keyword => queryLower.includes(keyword))) {
                cbseResults.push({
                    title: 'CBSE Class 10 Resource',
                    content: `Official CBSE content and examination materials for: ${decodeURIComponent(encodedQuery)}`,
                    url: '',
                    source: 'CBSE Database',
                    relevance: 9,
                    type: 'cbse_official',
                    credibility: 'very_high',
                    timestamp: Date.now()
                });
            }
            
            return cbseResults;
            
        } catch (error) {
            console.log('CBSE content search error:', error);
            return [];
        }
    }

    deduplicateResultsIntelligently(results) {
        const seen = new Map();
        return results.filter(result => {
            const contentKey = result.content.toLowerCase().substring(0, 100).replace(/[^a-z0-9]/g, '');
            const titleKey = result.title.toLowerCase().replace(/[^a-z0-9]/g, '');
            const combinedKey = `${titleKey}_${contentKey}`;
            
            if (seen.has(combinedKey)) {
                // Keep the result with higher credibility
                const existing = seen.get(combinedKey);
                const credibilityScore = {'very_high': 4, 'high': 3, 'medium': 2, 'low': 1};
                if ((credibilityScore[result.credibility] || 0) > (credibilityScore[existing.credibility] || 0)) {
                    seen.set(combinedKey, result);
                    return true;
                }
                return false;
            }
            
            seen.set(combinedKey, result);
            return true;
        });
    }

    rankResultsWithAI(results, originalQuery) {
        const query = originalQuery.toLowerCase();
        const queryWords = query.split(' ').filter(word => word.length > 2);
        
        return results.sort((a, b) => {
            let scoreA = a.relevance || 5;
            let scoreB = b.relevance || 5;
            
            // Enhanced relevance calculation
            queryWords.forEach(word => {
                const titleMatchA = (a.title.toLowerCase().match(new RegExp(word, 'g')) || []).length;
                const contentMatchA = (a.content.toLowerCase().match(new RegExp(word, 'g')) || []).length;
                const titleMatchB = (b.title.toLowerCase().match(new RegExp(word, 'g')) || []).length;
                const contentMatchB = (b.content.toLowerCase().match(new RegExp(word, 'g')) || []).length;
                
                scoreA += (titleMatchA * 3) + contentMatchA;
                scoreB += (titleMatchB * 3) + contentMatchB;
            });
            
            // Credibility boost
            const credibilityBonus = {'very_high': 3, 'high': 2, 'medium': 1, 'low': 0};
            scoreA += credibilityBonus[a.credibility] || 0;
            scoreB += credibilityBonus[b.credibility] || 0;
            
            // Type preferences
            const typeBonus = {
                'primary': 5, 'instant': 4, 'definition': 4, 'encyclopedia': 3,
                'educational': 3, 'cbse_official': 4, 'news': 1, 'related': 2
            };
            
            scoreA += typeBonus[a.type] || 0;
            scoreB += typeBonus[b.type] || 0;
            
            // Recency bonus for news
            if (a.type === 'news' && a.publishedAt) {
                const ageHours = (Date.now() - new Date(a.publishedAt).getTime()) / (1000 * 60 * 60);
                scoreA += Math.max(0, 2 - (ageHours / 24)); // Bonus decreases with age
            }
            
            return scoreB - scoreA;
        });
    }

    enhanceResultsWithContext(results, query) {
        return results.map(result => ({
            ...result,
            contextualRelevance: this.calculateContextualRelevance(result, query),
            enhancedSummary: this.generateEnhancedSummary(result),
            suggestedFollowUps: this.generateFollowUpQuestions(result, query)
        }));
    }

    calculateContextualRelevance(result, query) {
        // Advanced contextual relevance calculation
        const queryContext = this.contextManager.analyzeQueryContext(query);
        const resultContext = this.contextManager.analyzeResultContext(result);
        
        return
